syntax = "proto3";
package com.cognite.seismic;

import "google/protobuf/empty.proto";
import "cognite/seismic/protos/types.proto";
import "cognite/seismic/protos/query_service_messages.proto";

/**
Service for querying data and metadata from seismic files in Cognite Data Fusion (CDF) seismic datastore
We use the word `File` to refer to a single seismic file/dataset/cube/volume. Queries on a file require it to have been
previously ingested into CDF using (ingest_service.proto)
**/

service Query {

  // Metadata queries

  /**
  Finds one survey given its name or id. Optionally, lists its associated files.
  **/
  rpc GetSurvey (SurveyQueryRequest) returns (GetSurveyResponse) {}
  /**
  Lists all surveys owned by this project. Optionally, includes their lists of files.
  **/
  rpc ListSurveys (ListSurveysQueryRequest) returns (SurveyWithFilesResponse) {}
  /**
  Lists all files available, both owned by the authorized CDF project and shared with it
  **/
  rpc ListFiles (google.protobuf.Empty) returns (ListFilesResponse) {}
  /**
  Search surveys based on two criteria:
      Coverage polygon of files in the survey are within an area delimited by a specified polygon
      Filters on metadata of both the survey and the file
  Both criteria are optional and can be combined for a more detailed search.
  **/
  rpc SearchSurveys (SearchSurveyRequest) returns (SurveyWithFilesResponse) {}
  /**
  Returns file metadata given its name or id.
  **/
  rpc GetFile (FileQueryRequest) returns (GetFileResponse) {}
  /**
  Returns a binary header given its file name or id.
  **/
  rpc GetBinaryHeader (HeaderFileQueryRequest) returns (GetBinaryHeaderResponse) {}
  /**
  Returns a text header given its file name or id.
  **/
  rpc GetTextHeader (HeaderFileQueryRequest) returns (GetTextHeaderResponse) {}


  // Geometry and grid queries
  /**
  Returns the coverage for a given file identified by its id or name.
  The coverage is represented by a polygon either in WKT or geojson and represents the area covered by traces
  in the file.
  There can be holes in the polygon if traces do not exist in an area inside of it.
  **/
  rpc GetFileDataCoverage (FileCoverageRequest) returns (DataCoverageResponse) {}
  /**
  Returns the set of valid crossline indices for a specific inline, in a given file
  **/
  rpc GetCrosslinesByInline (FileLineQueryRequest) returns (AvailableLines) {}
  /**
  Returns the set of valid inline indices for a specific crossline, in a given file
  **/
  rpc GetInlinesByCrossline (FileLineQueryRequest) returns (AvailableLines) {}


  // Trace queries
  /**
  Returns the trace in a file that is closest to a point given its coordinates (x,y)
  **/
  rpc GetTraceByCoordinates (CoordinateTraceQueryRequest) returns (Trace) {}
  /**
  Returns a trace for each coordinate (inline, xline) from the input stream
  **/
  rpc GetTracesByLine(stream LineTraceQueryRequest) returns (stream Trace) {}
  /**
  Returns a volume bounded by the provided ranges
  **/
  rpc GetVolume(VolumeRequest) returns (stream Trace) {}
  /**
  Returns a slice with traces following a path determined by an arbitrary line.
  Depending on interpolating method, these can be either real traces in the file that are closest to the path or
  synthetic traces generated by interpolation of the traces in the file.
  **/
  rpc GetSliceByGeometry (GeometrySliceQueryRequest) returns (stream Trace) {}
  /**
  Returns a SEG-Y file.
  Can retrieve a full file or create a new cropped file filtering on areas of interest only.
  **/
  rpc GetSegYFile (SegYQueryRequest) returns (stream SegYQueryResponse) {}
}

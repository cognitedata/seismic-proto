syntax = "proto3";
package com.cognite.seismic;

import "google/protobuf/empty.proto";
import "cognite/seismic/protos/types.proto";
import "cognite/seismic/protos/query_service_messages.proto";

/**
Service for querying data and metadata from seismic files in Cognite Data Fusion (CDF) seismic datastore
We use the word `File` to refer to a single seismic file/dataset/cube. Queries on a file require it to have been
previously ingested into CDF using (ingest_service.proto)

Queries are divided in:

    - Metadata:

    General information and headers for surveys and files

    - Geometry and grid:

    Information on a file's grid and positioning, such as coverage and range of inlines and crosslines

    - Trace:

    Find a single trace in the file. A trace will include header, position information and samples.
    More details about the trace format can be found on its definition in (types.proto)

    - Vertical slice:

    Get 2D vertical slices of samples (thus 1D arrays of traces). The slices can be based on a single defined line or
    in an arbitrarily defined line with interpolation.

    - Area:

     Get 3D volumes of samples (thus 2D arrays of traces) defined by a region in the horizontal plane

    - Horizontal slice:

     Get 2D horizontal slices of samples defined by a region in the horizontal plane and a specific index in depth/time

    - Artificial sampling:

    Get the (calculated/interpolated) values of properties in the file/cube given arbitrary positions
**/

service Query {

    // Metadata queries

    /**
    Finds one survey given its name or id. Optionally, lists its associated files.
    **/
    rpc GetSurvey (SurveyQueryRequest) returns (GetSurveyResponse) {}
    /**
    Lists all surveys owned by this project. Optionally, includes their lists of files.
    **/
    rpc ListSurveys (ListSurveysQueryRequest) returns (SurveyWithFilesResponse) {}
    /**
    Lists all files available, both owned by the authorized CDF project and shared with it
    **/
    rpc ListFiles (google.protobuf.Empty) returns (ListFilesResponse) {}
    /**
    Search surveys based on two criteria:
        Coverage polygon of files in the survey are within an area delimited by a specified polygon
        Filters on metadata of both the survey and the file
    Both criteria are optional and can be combined for a more detailed search.
    **/
    rpc SearchSurveys (SearchSurveyRequest) returns (SurveyWithFilesResponse) {}
    /**
    Returns file metadata given its name or id.
    **/
    rpc GetFile (FileQueryRequest) returns (GetFileResponse) {}
    /**
    Returns a binary header given its file name or id.
    **/
    rpc GetBinaryHeader (HeaderFileQueryRequest) returns (GetBinaryHeaderResponse) {}
    /**
    Returns a text header given its file name or id.
    **/
    rpc GetTextHeader (HeaderFileQueryRequest) returns (GetTextHeaderResponse) {}


    // Geometry and grid queries

    /**
    Returns the coverage for a given file identified by its id or name.
    The coverage is represented by a polygon either in WKT or geojson and represents the area covered by traces
    in the file.
    There can be holes in the polygon if traces do not exist in an area inside of it.
    **/
    rpc GetFileDataCoverage (FileCoverageRequest) returns (DataCoverageResponse) {}
    /**
    [Not implemented yet]
    Returns the navigation polygon for the survey obtained from DISKOS
    **/
    rpc GetNavigationPolygon (NavigationPolygonRequest) returns (DataCoverageResponse) {}
    /**
    Returns the full range of the inlines and crosslines in the file, i.e. the minimum and maximum inline and crossline
    **/
    rpc GetFileLineRange (FileQueryRequest) returns (LineRangeResponse) {}
    /**
    Returns the set of valid crossline indices for a specific inline, in a given file
    **/
    rpc GetCrosslinesByInline (FileLineQueryRequest) returns (AvailableLines) {}
    /**
    Returns the set of valid inline indices for a specific crossline, in a given file
    **/
    rpc GetInlinesByCrossline (FileLineQueryRequest) returns (AvailableLines) {}


    // Trace queries
    /**
    Returns the trace in a file that is closest to a point given its coordinates (x,y)
    **/
    rpc GetTraceByCoordinates (CoordinateTraceQueryRequest) returns (Trace) {}
    /**
    Returns a trace for each coordinate (inline, xline) from the input stream
    **/
    rpc GetTracesByLine(stream LineTraceQueryRequest) returns (stream Trace) {}



    // Slice queries

    /**
    Returns all or a subset of traces in a slice (inline or crossline) given its index (and optionally from/to)
    **/
    rpc GetSliceByLine (LineSliceQueryRequest) returns (stream Trace) {}
    /**
    Returns a slice with traces following a path determined by an arbitrary line.
    Depending on interpolating method, these can be either real traces in the file that are closest to the path or
    synthetic traces generated by interpolation of the traces in the file.
    **/
    rpc GetSliceByGeometry (GeometrySliceQueryRequest) returns (stream Trace) {}



    // Area queries

    /**
    Returns a volume with all traces inside a given range of inlines and a given range of crosslines
    **/
    rpc GetCubeByLines (LineCubeRequest) returns (stream Trace) {}
    /**
    Returns a volume with all traces with x, y coordinates inside an arbitrary 2D polygon
    **/
    rpc GetCubeByGeometry (GeometryCubeRequest) returns (stream Trace) {}
    /**
    Returns a SEG-Y file.
    Can retrieve a full file or create a new cropped file filtering on areas of interest only.
    **/
    rpc GetSegYFile (SegYQueryRequest) returns (stream SegYQueryResponse) {}


    // Depth-indexed area queries

    /**
    Returns a horizontal slice for a given depth or time and area constrained by a range of inlines and crosslines
    **/
    rpc GetTimeSliceByLines (LineTimeSliceQueryRequest) returns (stream SurfacePoint) {}
    /**
    Returns a horizontal slice for a given depth or time and area constrained by an arbitrary 2D polygon
    **/
    rpc GetTimeSliceByGeometry (GeometryTimeSliceQueryRequest) returns (stream SurfacePoint) {}

    // Volume queries
    rpc GetVolume(VolumeRequest) returns (stream Trace) {}


    // Artificial sampling

    /**
    [Not implemented yet]
    Returns a pseudo-trace with the values corresponding to an arbitrary 3D path. Suitable for correlating with wells.
    **/
    rpc GetPath (PathQueryRequest) returns (Trace) {}
}

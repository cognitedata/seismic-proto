/**
Messages that describe data types used by Seismic Datastore in Cognite Data Fusion
*/
syntax = "proto3";
package com.cognite.seismic.v1;

import "google/protobuf/wrappers.proto";
import "cognite/seismic/protos/types.proto";

message Coordinate {
    float x = 1;
    float y = 2;
}

message LineSelect {
    oneof direction {
        int32 iline = 1;
        int32 xline = 2;
    }
}

message LineBasedVolume {
    LineDescriptor iline = 1;
    LineDescriptor xline = 2;
    LineDescriptor z = 3;
}

message LineRange {
    google.protobuf.Int32Value from_line = 1;
    google.protobuf.Int32Value to_line = 2;
}

/**
 * A cutout of a seismic store
 */
 message Seismic {
    string id = 1;  // Always present
    string external_id = 2;
    string name = 3;
    string crs = 4;
    string survey_id = 5;  // All cutouts are associated with a survey
    map<string, string> metadata = 6;
    TextHeader text_header = 7;
    BinaryHeader binary_header = 8;
    LineRange line_range = 9;
    CutoutDef cutout_def = 10;
    string partition_id = 11;
    SeismicStore seismic_store = 12;  // Present only if user can view the tracestore
}

/**
Represents a seismic store.
**/
message SeismicStore {
    string id = 1;
    string name = 2;
    string survey_id = 3;
    TraceSource location = 4; // Where the traces are stored
    IngestionSource ingestion_source = 5; // How the file was ingested
    map<string, string> metadata = 6;
    File ingested_file = 7; // The info for the original file, if it was ingested as a file
}

/**
Represents partitions, used for granular access control
**/
message Partition {
    string id = 1;
    string name = 2;
    string external_id = 3;
    string survey_id = 4;
    repeated Seismic seismics = 5;
}

/**
Specifies the cutout "shape"
**/
message CutoutDef {
    string json = 1;  // Uses the Cutout Definition schema
}

/**
Used to identify zero or one objects that may have an external id 
**/
message Identifier {
    oneof handle {
        string id = 1;
        string external_id = 2;
    }
}

/**
Used to identify any number of objects, intended for any plural Read* endpoints. Set* endpoints should use Identifier.

Can search by id, name, or prefix.
**/
message SearchSpec {
    oneof findby {
        string id = 1;
        // External ids only exist for partitions and seismics.
        string external_id = 2;  // Exact match required
        string external_id_substring = 3;
        // Names exist for everything
        string name = 4;  // An exact string match is required
        string name_substring = 5;  // Searches for names having this substring.
    }
}

message TextHeader {
    string file_id = 1;
    string header = 2;
    string raw_header = 3;
}

message BinaryHeader {
    string file_id = 1;
    int32 traces = 2;
    int32 trace_data_type = 3;
    int32 fixed_length_traces = 4;
    int32 segy_revision = 5;
    int32 auxtraces = 6;
    int32 interval = 7;
    int32 interval_original = 8;
    int32 samples = 9;
    int32 samples_original = 10;
    int32 ensemble_fold = 11;
    int32 vertical_sum = 12;
    int32 trace_type_sorting_code = 13;
    int32 sweep_type_code = 14;
    int32 sweep_frequency_start = 15;
    int32 sweep_frequency_end = 16;
    int32 sweep_length = 17;
    int32 sweep_channel = 18;
    int32 sweep_taper_start = 19;
    int32 sweep_taper_end = 20;
    int32 sweep_taper_type = 21;
    int32 correlated_traces = 22;
    int32 amplitude_recovery = 23;
    int32 original_measurement_system = 24;
    int32 impulse_signal_polarity = 25;
    int32 vibratory_polarity_code = 26;
    bytes raw_header = 27;
}


message TraceExtent {
    int32 xline = 1;
    int32 iline = 2;
    LineDescriptor z = 3;
}

message LineBasedExtent {
    repeated TraceExtent extents = 1;
}

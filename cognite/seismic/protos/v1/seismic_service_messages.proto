/**
Messages from the query service of Seismic Datastore in Cognite Data Fusion
*/
syntax = "proto3";
package com.cognite.seismic.v1;

import "google/protobuf/wrappers.proto";

// ---

// Iteration: 1 <- increment this number when you modify this file
// (╯°□°)╯︵ ┻━┻

/**
 * A Seismic data volume/cube, often derived from a single SEG-Y file, but could also
 * represent a subvolume/slice of another volume, or another arbitrary 3 dimensional data set.
 */
message Volume {
    string id = 1;  // Always present
    string name = 2;  // Present if specified on volume creation
    string survey_id = 3;  // Always present, all volumes are associated with a survey
    map<string, string> metadata = 4;
}

// Specify either an identifier or a name (prefix) to retrieve data for
message SearchSpec {
    oneof findby {
        string id = 1;
        string name = 2;  // An exact string match is required
        string name_prefix = 3;  // Searches for names having this prefix
    }
}

message ListSurveysRequest {
    repeated SearchSpec surveys = 1; // Optional identifier of the survey. If empty, retrieve all accessible surveys
    bool list_volume_ids = 2;           // set to true to list the survey's volumes in the response (default: false)
    bool include_metadata = 3;       // set to true to include survey metadata in the response (default: false)
}

message ListSurveyResponse {
    string id = 1;
    string name = 2;
    map<string, string> metadata = 3;
    repeated string volume_ids = 4;  // Optionally present
}

message ListVolumesRequest {
    oneof findby {
        SearchSpec survey = 1;
        repeated SearchSpec volumes = 2;
    }
    bool include_text_header = 3;
    bool include_binary_header = 4;
    bool include_line_range = 5;
}

message ListVolumesResponse {
    string id = 1;
    string name = 2;
    string crs = 3;
    string survey_id = 4; 
    map<string, string> metadata = 5;
    TextHeader text_header = 6;
    BinaryHeader binary_header = 7;
    LineRange line_range = 8;
}









message LineRange {
    LineDescriptor iline = 1;
    LineDescriptor xline = 2;
}

message LineDescriptor {
    google.protobuf.Int32Value min = 1;
    google.protobuf.Int32Value max = 2;
}

message TextHeader {
    string file_id = 1;
    string header = 2;
    string raw_header = 3;
}

message BinaryHeader {
    string file_id = 1;
    int32 traces = 2;
    int32 trace_data_type = 3;
    int32 fixed_length_traces = 4;
    int32 segy_revision = 5;
    int32 auxtraces = 6;
    int32 interval = 7;
    int32 interval_original = 8;
    int32 samples = 9;
    int32 samples_original = 10;
    int32 ensemble_fold = 11;
    int32 vertical_sum = 12;
    int32 trace_type_sorting_code = 13;
    int32 sweep_type_code = 14;
    int32 sweep_frequency_start = 15;
    int32 sweep_frequency_end = 16;
    int32 sweep_length = 17;
    int32 sweep_channel = 18;
    int32 sweep_taper_start = 19;
    int32 sweep_taper_end = 20;
    int32 sweep_taper_type = 21;
    int32 correlated_traces = 22;
    int32 amplitude_recovery = 23;
    int32 original_measurement_system = 24;
    int32 impulse_signal_polarity = 25;
    int32 vibratory_polarity_code = 26;
    bytes raw_header = 27;
}

/**
Request a volume from a file by range of inlines, crosslines and time
**/
message TraceDataRequest {
    string volumeid = 1;
    oneof traceExtent {
        LineBasedCube cube = 2; // Inline/crossline, z extent
        GeometryBasedExtent geometry = 3;  //  Simple WKT geometry? What is "simple"?
        //GeospatialObjectExtent geospatial = 4;  // Retrieve object from Geospatial API?
    }
    bool include_trace_header = 16;
}

/**
Range of inline, crossline and z indices defining an extent of trace data to retrieve from a Volume.
**/
message LineBasedCube {
    LineDescriptor iline = 1;
    LineDescriptor xline = 2;
    LineDescriptor z = 3;
}

message TraceExtent {
    int32 xline = 1;
    int32 iline = 2;
    LineDescriptor z = 3;
}

message LineBasedExtent {
    repeated TraceExtent = 1;
}


}
/**

*/

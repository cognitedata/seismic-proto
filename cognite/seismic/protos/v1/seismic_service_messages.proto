/**
Messages that describe requests/responses from the Seismic Datastore in Cognite Data Fusion
*/
syntax = "proto3";
package com.cognite.seismic.v1;

import "cognite/seismic/protos/v1/seismic_service_datatypes.proto";

// ---

// Iteration: 7 <- increment this number when you modify this file
// (╯°□°)╯︵ ┻━┻

/**
    Surveys
**/

message CreateSurveyRequest {
    string name = 1;  // equivalent to external id
    map<string, string> metadata = 2;
}

message SearchSurveysRequest {
    repeated SearchSpec surveys = 1; // Optional identifier of the survey. If empty, retrieve all accessible surveys
    bool list_seismic_ids = 2;           // set to true to list the survey's seismics in the response (default: false)
    bool list_seismic_store_ids = 3;  // Set to true to list the survey's seismic stores in the response. Only tenant users can see this.
    bool include_metadata = 4;       // set to true to include survey metadata in the response (default: false)
}

message SearchSurveyResponse {
    Survey survey = 1;
    repeated string seismic_ids = 2;  // Optionally present
    repeated string seismic_store_ids = 3;  // Optionally present
}

message EditSurveyRequest {
    Identifier survey = 1;
    map<string, string> metadata = 2;  // The existing metadata will be replaced with this metadata.
}

message DeleteSurveyRequest {
    Identifier survey = 1;
}

message DeleteSurveyResponse {
    bool success = 1;
}

/**
    Seismics
**/

message CreateSeismicRequest {
    string name = 1;  // optional
    string external_id = 2;  // not optional
    Identifier partition = 3;
    string seismic_store_id = 4;
    VolumeDef volume_def = 5;  // Defines the portion of the tracestore volume to limit the new seismic to 
    map<string, string> metadata = 6;
}

message SearchSeismicsRequest {
    oneof findby {
        SearchSpec survey = 1;
        SearchSpec seismic = 2;
        SearchSpec partition = 3;  // Can only search on partitions you can see.
    }
    bool include_text_header = 4;
    bool include_binary_header = 5;
    bool include_line_range = 6;
    bool include_volume_definition = 7;  // If true, include the volume definition blob
    bool include_seismic_store = 8; // If true, include info on the backing seismicstore. Must be data manager.
    bool include_partition = 9; // If true, include info on the partition. Must be data manager.
}

message EditSeismicRequest {
    Identifier seismic = 1;
    string name = 2;
    map<string, string> metadata = 3;
}

message DeleteSeismicRequest {
    Identifier seismic = 1;
}

message DeleteSeismicResponse {
    bool succeeded = 1;
}

message SearchSeismicStoresRequest {
    SearchSpec seismic_stores = 1;
    bool include_file_info = 2;  // If true, include File information in the response
}

message EditSeismicStoreRequest {
    string seismic_store_id = 1;
    string name = 2;
}

/**

    Partitions

**/

message CreatePartitionRequest {
    string name = 1;  // optional name
    string external_id = 2;  // not optional externalid
}

message SearchPartitionsRequest {
    SearchSpec partitions = 1;
}

message EditPartitionRequest {
    Identifier partition = 1;  // Must uniquely identify a partition
    string new_name = 2;
}

message DeletePartitionRequest {
    Identifier partition = 1;
}

message DeletePartitionResponse {
    bool success = 1;
}

/**
    Trace querying
**/

message VolumeRequest {
    oneof identifier {
        Identifier seismic = 1;
        string seismic_store_id = 2;  // Need to be a data manager or tenant user, not 3rd party, to access by tracestore
    }
    LineBasedVolume volume = 3;
    bool include_trace_header = 4;
}

/**
Messages that describe requests/responses from the Seismic Datastore in Cognite Data Fusion
*/
syntax = "proto3";
package com.cognite.seismic.v1;

import "cognite/seismic/protos/v1/seismic_service_datatypes.proto";

// ---

// Iteration: 5 <- increment this number when you modify this file
// (╯°□°)╯︵ ┻━┻

message SearchSurveysRequest {
    repeated SearchSpec surveys = 1; // Optional identifier of the survey. If empty, retrieve all accessible surveys
    bool list_cube_ids = 2;           // set to true to list the survey's cubes in the response (default: false)
    bool list_tracestore_ids = 3;  // Set to true to list the survey's tracestores in the response. Only tenant users can see this.
    bool include_metadata = 4;       // set to true to include survey metadata in the response (default: false)
}

message SearchSurveyResponse {
    string id = 1;
    string name = 2;
    map<string, string> metadata = 3;
    repeated string cube_ids = 4;  // Optionally present
    repeated string tracestore_ids = 5;  // Optionally present
}

message CreateCubeRequest {
    string name = 1;  // optional
    string external_id = 2;  // not optional
    Identifier partition = 3;
    string tracestore_id = 4;
    CutoutDef cutout_def = 5;  // Defines the portion of the tracestore volume to cut out    
}

message SearchCubesRequest {
    oneof findby {
        SearchSpec survey = 1;
        SearchSpec cube = 2;
        SearchSpec partition = 3;  // Can only search on partitions you can see.
    }
    bool include_text_header = 4;
    bool include_binary_header = 5;
    bool include_line_range = 6;
    bool include_cutout_definition = 7;  // If true, include the cutout definition blob
    bool include_tracestore = 8; // If true, include info on the backing tracestores. Must be data manager.
    bool include_partition = 9; // If true, include info on the partition. Must be data manager.
}

message EditCubeRequest {
    Identifier cube = 1;
    string new_name = 2;
}

message DeleteCubesRequest {
    repeated Identifier cubes = 1;
}

message DeleteCubeResponse {
    string id = 1;
    string external_id = 2;
    bool succeeded = 3;    
}

message ReadTracestoreRequest {
    repeated SearchSpec tracestores = 1;
    bool include_file_info = 2;  // If true, include File information in the response
}

message SetTracestoreNameRequest {
    string tracestore_id = 1;
    string new_name = 2;
}

/**

    Partitions

**/

message CreatePartitionsRequest {
    string name = 1;  // optional name
    string external_id = 2;  // not optional externalid
}

message ReadPartitionsRequest {
    SearchSpec partitions = 1;
}

message EditPartitionRequest {
    Identifier partition = 1;  // Must uniquely identify a partition
    string new_name = 2;
}

message DeletePartitionsRequest {
    repeated Identifier id = 1;
}

message DeletePartitionResponse {
    string id = 1;
    string external_id = 2;
    bool success = 3;
}

/**
    Trace querying
**/

message VolumeRequest {
    oneof identifier {
        Identifier cube = 1;
        string tracestore_id = 2;  // Need to be a data manager or tenant user, not 3rd party, to access by tracestore
    }
    LineBasedVolume volume = 3;
    bool include_trace_header = 4;
}

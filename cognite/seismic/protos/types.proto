/**
Messages for types used in ingestion and query services in Seismic Datastore in Cognite Data Fusion
**/
syntax = "proto3";
package com.cognite.seismic;

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// -----

// Common response types

/**
    Basic type representing (x,y) coordinate in the given CRS
**/
message Coordinate {
    string crs = 1; // The Coordinate Reference System of the coordinate. Generally should be an EPSG code including the EPSG: prefix, for example `EPSG:23031`
    float x = 2; // The x value of the coordinate
    float y = 3; // The y value of the coordinate
}


/** Type for user-specified affine transformation in surveys **/

// Correlated grid indices and coordinates
message DoubleTraceCoordinates {
    int32 iline = 1; // The inline number. Within a 3D survey, a inline represents a seismic line parallel to the direction in which the data was adquired. 
    int32 xline = 2; // The xline number. Within a 3D survey, a xline represents a seismic line perpendicular to the direction in which the data was adquired. 
    float x = 3; // The x value of the coordinate
    float y = 4; // The y value of the coordinate
}

enum Handedness {
    // inline axis is 90 deg clockwise from crossline
    // AKA EPSG code 9666
    RIGHTHANDED = 0;
    // inline axis is 90 deg counterclockwise from crossline
    // AKA EPSG code 1049
    LEFTHANDED = 1;
}

// Specify the transformation by an origin point and the crossline azimuth
// Format inspired by IOGP guidance note 373-7-2 section 2.3.2.4.
// https://ge0mlib.com/papers/Guide/IOGP/373-07-2-1_2017.pdf
message P6Transformation {
    Handedness handedness = 1;
    // A point in the grid
    DoubleTraceCoordinates origin = 2;
    // The bin width along the inline axis
    float iline_bin_width = 3;
    // The bin width along the crossline axis
    float xline_bin_width = 4;
    // Map bearing of the crossline axis in clockwise degrees from north
    float xline_azimuth = 5;
    // Inline increment corresponding to a bin
    int32 iline_bin_inc = 6;
    // Crossline increment corresponding to a bin
    int32 xline_bin_inc = 7;
}

// Have the seismic service try to deduce the affine transformation for each file by
// reading trace coordinates
message DeduceFromTraces {
};

// Specify the transformation by giving the coordinates of three or more corners
message TraceCorners {
    repeated DoubleTraceCoordinates corners = 1;
}

// Specify the affine transformation between line indices and coordinates
message SurveyGridTransformation {
    oneof transformation {
        P6Transformation p6_transformation = 1;
        TraceCorners trace_corners = 2;
        DeduceFromTraces deduce_from_traces = 3;
    }
}


/**
    Basic type to represent a seismic trace
    Used in trace, vertical slices and volume queries
    Contains the samples and information on positioning
    If a trace is an original trace in the file, it can optionally contain the trace header.
    This is not valid for traces that are synthetically generated from interpolation.
 **/
message Trace {
    bytes trace_header = 1;
    google.protobuf.Int32Value iline = 2; // The inline number. Within a 3D survey, a inline represents a seismic line parallel to the direction in which the data was adquired. 
    google.protobuf.Int32Value xline = 3; // The xline number. Within a 3D survey, a xline represents a seismic line perpendicular to the direction in which the data was adquired. 
    repeated float trace = 4;                // The underlying array of floats representing samples
    Coordinate coordinate = 5;
}

/**
    Wrapper over Trace type that additionally provide information about the range of z values
    included in the trace.
 **/
 message SlabTrace {
    Trace trace = 1;
    int32 z_from = 2;
    int32 z_to = 3;
}

/**
    Basic type to represent a point in a surface defined by a horizontal grid
    Used in horizontal slice queries
 **/
message SurfacePoint {
    int32 iline = 1; // The inline number. Within a 3D survey, a inline represents a seismic line parallel to the direction in which the data was adquired. 
    int32 xline = 2; // The xline number. Within a 3D survey, a xline represents a seismic line perpendicular to the direction in which the data was adquired. 
    float value = 3;
}

// -----

// Common request types

// A survey represents a collection of files in the same area
message Survey {
    string id = 1; // Survey ID
    string name = 2; // Survey name
    map<string, string> metadata = 3;
    ExternalId external_id = 4; // Survey external ID
    CRS crs = 5; // The Coordinate Reference System of the survey
    SurveyGridTransformation grid_transformation = 6;
    CustomSurveyCoverage custom_coverage = 7;
}

// File or dataset or cube derived from a single SEG-Y file
message File {
    string id = 1;
    string name = 2;
    map<string, string> metadata = 3;
    bool is_temporary = 4;
    ExternalId external_id = 5;
}

message Project {
    string id = 1;
    string alias = 2;
}

// Specify either id or name to find a file or survey.
message Identifier {
    oneof findby {
        string id = 1;
        string name = 2;
    }
}

message ExternalId {
    string external_id = 1;
}

message LineDescriptor {
    google.protobuf.Int32Value min = 1;
    google.protobuf.Int32Value max = 2;
    google.protobuf.Int32Value step = 3;
}

// Specify either inline OR crossline
message LineSelect {
    oneof direction {
        int32 iline = 1; // The inline number. Within a 3D survey, a inline represents a seismic line parallel to the direction in which the data was adquired. 
        int32 xline = 2; // The xline number. Within a 3D survey, a xline represents a seismic line perpendicular to the direction in which the data was adquired.
    }
}

// Object to store the line range. From and to are optional
message LineRange {
    google.protobuf.Int32Value from_line = 1;
    google.protobuf.Int32Value to_line = 2;
}

// Parameters for requesting coverage of survey
message CoverageParameters {
    CRS crs = 1;                 // [optional] If CRS provided converts coverage to given CRS. Otherwise, will return in the survey's original CRS
    bool in_wkt = 2;             // set this to true to return in WKT format. Otherwise, response will be in geojson format by default
}

// -----

// Common geometry types

message CRS {
    string crs = 1;
}

// Well-known text representation of geometry (<a href="http://www.opengeospatial.org/standards/sfa">WKT</a>)
message Wkt {
    string geometry = 1;
}

// The GeoJSON format (<a href="https://tools.ietf.org/html/rfc7946">RFC 7946</a>)
// Supported geometry: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, and GeometryCollection.
// Example:
// <pre>{
//    "type": "Point",
//    "coordinates": [100.0, 0.0]
// }</pre>
message GeoJson {
    google.protobuf.Struct json = 1;
}

// Geometry can be specified using either wkt or geoJSON. CRS is always required.
message Geometry {
    CRS crs = 1;           // required
    oneof format {
        Wkt wkt = 2;
        GeoJson geo = 3;
    }
}

// Customer-provided custom coverage for surveys
message CustomSurveyCoverage {
    message NoCustomCoverage { };
    oneof custom {
        // Overrides survey coverage with the provided custom coverage geometry
        Geometry custom_coverage = 1;
        // Specifies that no custom coverage is provided, so survey coverage
        // is computed from the seismicstores in the survey
        NoCustomCoverage no_custom_coverage = 2;
    }
}

/**
Range of inline and crossline indices defining a 2D region
**/
message LineBasedRectangle {
    PositionQuery top_left = 1;
    PositionQuery bottom_right = 2;
}

/**
Point defined by its inline and crossline indices
**/
message PositionQuery {
    int32 iline = 1; // The inline number. Within a 3D survey, a inline represents a seismic line parallel to the direction in which the data was adquired. 
    int32 xline = 2; // The xline number. Within a 3D survey, a xline represents a seismic line perpendicular to the direction in which the data was adquired.
}

// -----

// Enums

enum JobStatus {
    NONE = 0;
    QUEUED = 1;
    IN_PROGRESS = 2;
    SUCCESS = 3;
    FAILED = 4;
    TIMEOUT = 5;
}

enum FileStep {
    REGISTER = 0;
    INSERT_FILE_HEADERS = 1;
    INSERT_TRACE_HEADERS = 2;
    INSERT_DATA = 3;
    COMPUTE_COVERAGE = 4;
    COMPUTE_GRID = 5;
    COMPUTE_TRACE_INDICES = 6;
    DELETING = 254;
    DELETE = 255;
}

enum InterpolationMethod {
    NEAREST_TRACE = 0;
    INVERSE_DISTANCE_WEIGHTING = 1;
}

enum IngestionSource {
    INVALID_SOURCE = 0;
    FILE_SOURCE = 1;
    TRACE_WRITER = 2;  // TraceWriter
}

enum Dimensions {
    UNSPECIFIED_DIMENSION = 0;
    TWO_DEE = 2;
    THREE_DEE = 3;
}

enum TraceHeaderField {
    UNSPECIFIED_TRACE_HEADER_FIELD = 0;
    ENERGY_SOURCE_POINT = 1;
    CDP = 2;
    INLINE = 3;
    CROSSLINE = 4;
    SHOTPOINT = 5;
}

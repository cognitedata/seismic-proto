syntax = "proto3";
package com.cognite.seismic;

import "google/protobuf/struct.proto";
// -----

message Survey {
    string id = 1;
    string name = 2;
    map<string, string> metadata = 3;
}

// -----
enum FileStatus {
    REGISTERED = 0;
    QUEUED = 1;
    IN_PROGRESS = 2;
    SUCCESS = 3;
    FAILED = 4;
}

message File {
    string id = 1;
    string name = 2;
    map<string, string> metadata = 3;
    FileStatus status = 4;
}

message TextHeader {
    string file_id = 1;
    string header = 2;
    string raw_header = 3;
}

message BinaryHeader {
    string file_id = 1;
    int32 traces = 2;
    int32 trace_data_type = 3;
    int32 fixed_length_traces = 4;
    int32 segy_revision = 5;
    int32 auxtraces = 6;
    int32 interval = 7;
    int32 interval_original = 8;
    int32 samples = 9;
    int32 samples_original = 10;
    int32 ensemble_fold = 11;
    int32 vertical_sum = 12;
    int32 trace_type_sorting_code = 13;
    int32 sweep_type_code = 14;
    int32 sweep_frequency_start = 15;
    int32 sweep_frequency_end = 16;
    int32 sweep_length = 17;
    int32 sweep_channel = 18;
    int32 sweep_taper_start = 19;
    int32 sweep_taper_end = 20;
    int32 sweep_taper_type = 21;
    int32 correlated_traces = 22;
    int32 amplitude_recovery = 23;
    int32 original_measurement_system = 24;
    int32 impulse_signal_polarity = 25;
    int32 vibratory_polarity_code = 26;
    bytes raw_header = 27;
}

message CRS {
    string crs = 1;
}

// Well-known text representation of geometry (<a href="http://www.opengeospatial.org/standards/sfa">WKT</a>)
message Wkt {
    string geometry = 1;
}

// The GeoJSON format (<a href="https://tools.ietf.org/html/rfc7946">RFC 7946</a>)
// Supported geometry: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, and GeometryCollection.
// Example:
// <pre>{
//    "type": "Point",
//    "coordinates": [100.0, 0.0]
// }</pre>
message GeoJson {
    google.protobuf.Struct json = 1;
}


// Specify either id or name to find a file or survey.
message Identifier {
    oneof findby {
        string id = 1;
        string name = 2;
    }
}

// Geometry can be specified using either wkt or geoJSON. CRS is always required.
message Geometry {
    CRS crs = 1;           // required
    oneof format {
        Wkt wkt = 2;
        GeoJson geo = 3;
    }
}

// Specify either inline OR crossline
message LineSelect {
    oneof direction {
        int32 iline = 1;
        int32 xline = 2;
    }
}

// The underlying array of floats for all traces
message Trace1D {
    bytes trace_header = 1;
    repeated float trace = 2;
}

// Slice (1D array of traces) that represents one inline or one crossline or a series of traces in a specified direction
message Trace2D {
    repeated Trace1D trace = 1;
}

// Volume (2D array of traces)
message Trace3D {
    repeated Trace2D trace = 1;
}

message SegYQueryResponse {
    bytes content = 1;
}
